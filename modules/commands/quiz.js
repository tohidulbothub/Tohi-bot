const axios = require("axios");

const baseApiUrl = async () => {
  const base = await axios.get(
    `https://raw.githubusercontent.com/Blankid018/D1PT0/main/baseApiUrl.json`
  );
  return base.data.api;
};

module.exports = {
  config: {
    name: "quiz",
    version: "1.2",
    credits: "Dipto, styled by TOHIDUL",
    cooldowns: 0,
    hasPermssion: 0,
    commandCategory: "game",
    usePrefix: true,
    prefix: true,
    usages: "{p}quiz\n{pn}quiz bn\n{p}quiz en",
  },

  run: async function ({ api, event, args }) {
    const input = args.join('').toLowerCase() || "bn";
    let timeout = 300;
    let category = "bangla";
    if (input === "bn" || input === "bangla") category = "bangla";
    else if (input === "en" || input === "english") category = "english";

    try {
      const response = await axios.get(
        `${await baseApiUrl()}/quiz?category=${category}&q=random`
      );
      const quizData = response.data.question;
      const { question, correctAnswer, options } = quizData;
      const { a, b, c, d } = options;
      const uid = event.senderID;
      const namePlayerReact = (await api.getUserInfo(uid))[uid].name;

      const quizMsg = {
        body:
`тХнтФАтЭЦтФБтФБтЭЦ[ ЁЭС╕ЁЭС╝ЁЭС░ЁЭТБ ЁЭС╗ЁЭС░ЁЭС┤ЁЭСм ]тЭЦтФБтФБтЭЦтФАтХо
ЁЯФо  ржкрзНрж░рж╢рзНржи: ${question}

ЁЯЕР) ${a}
ЁЯЕС) ${b}
ЁЯЕТ) ${c}
ЁЯЕУ) ${d}
тХ░тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтХп

ЁЯУй ржЙрждрзНрждрж░ ржжрж┐рждрзЗ ржПржЗ ржорзЗрж╕рзЗржЬрзЗ рж░рж┐ржкрзНрж▓рж╛ржЗ ржжрж┐ржи! (A/B/C/D)
тП│ рж╕ржорзЯ: ${timeout} рж╕рзЗржХрзЗржирзНржб

ЁЯСд ржЦрзЗрж▓рзЛрзЯрж╛рзЬ: ${namePlayerReact}
тЬи рж╢рзБржнржХрж╛ржоржирж╛!
`,
      };

      api.sendMessage(
        quizMsg,
        event.threadID,
        (error, info) => {
          global.client.handleReply.push({
            type: "reply",
            name: this.config.name,
            author: event.senderID,
            messageID: info.messageID,
            dataGame: quizData,
            correctAnswer,
            nameUser: namePlayerReact,
            attempts: 0
          });
          setTimeout(() => {
            api.unsendMessage(info.messageID);
          }, timeout * 1000);
        },
        event.messageID,
      );
    } catch (error) {
      console.log("тЭМ | Error occurred:", error);
      api.sendMessage("ржХрзБржЗржЬ ржЖржирждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗ! ржкрж░рзЗ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред", event.threadID, event.messageID);
    }
  },

  handleReply: async function({ event, api, handleReply, Users }) {
    const { correctAnswer, nameUser, author } = handleReply;
    const prefix = global.config.PREFIX || "/";
    if (event.senderID !== author)
      return api.sendMessage(
        "тЫФ рж╢рзБржзрзБ ржХрзБржЗржЬ рж╢рзБрж░рзБ ржХрж░рж╛ ржЗржЙржЬрж╛рж░ржЗ ржЙрждрзНрждрж░ ржжрж┐рждрзЗ ржкрж╛рж░ржмрзЗ!", event.threadID, event.messageID
      );

    const maxAttempts = 2;

    switch (handleReply.type) {
      case "reply": {
        let userReply = event.body.trim().toLowerCase();

        // Answer letter normalization
        let normalized = userReply[0];
        if (["a","b","c","d"].includes(normalized)) userReply = normalized;
        // Also allow Bengali equivalents
        else if (["ржП", "ржмрж┐", "рж╕рж┐", "ржбрж┐"].includes(userReply[0])) {
          userReply = { "ржП": "a", "ржмрж┐": "b", "рж╕рж┐": "c", "ржбрж┐": "d" }[userReply[0]];
        }

        if (handleReply.attempts >= maxAttempts) {
          await api.unsendMessage(handleReply.messageID);
          const incorrectMsg =
`тЫФ ${nameUser}, рждрзБржорж┐ рж╕рж░рзНржмрзЛржЪрзНржЪ ржЪрзЗрж╖рзНржЯрж╛ (${maxAttempts}) ржХрж░рзЗ ржлрзЗрж▓рзЗржЫрзЛ!
тЬЕ рж╕ржарж┐ржХ ржЙрждрзНрждрж░ ржЫрж┐рж▓: ${correctAnswer.toUpperCase()}

ЁЯФБ ржирждрзБржи ржХрзБржЗржЬ ржирж┐рждрзЗ ${prefix}quiz рж▓рж┐ржЦрзЛ!`;
          return api.sendMessage(incorrectMsg, event.threadID, event.messageID);
        }

        if (userReply === correctAnswer.toLowerCase()) {
          api.unsendMessage(handleReply.messageID).catch(console.error);
          let rewardCoins = 200;
          let rewardExp = 100;
          let userData = await Users.getData(author);
          await Users.setData(author, {
            money: userData.money + rewardCoins,
            exp: userData.exp + rewardExp,
            data: userData.data,
          });
          let correctMsg =
`ЁЯОЙ ржЕржнрж┐ржиржирзНржжржи, ${nameUser}! ЁЯМЯ
тЬЕ ржПржХржжржо ржарж┐ржХ ржЙрждрзНрждрж░! рждрзБржорж┐ ржХрзБржЗржЬ ржЪрзНржпрж╛ржорзНржкрж┐ржпрж╝ржи! ЁЯПЖ

ЁЯТ░ ржкрзБрж░рж╕рзНржХрж╛рж░: ${rewardCoins} ржХрзЯрзЗржи
тЪб ржЕржнрж┐ржЬрзНржЮрждрж╛: ${rewardExp} XP

ржирждрзБржи ржХрзБржЗржЬрзЗрж░ ржЬржирзНржп: ${prefix}quiz
`;
          api.sendMessage(correctMsg, event.threadID, event.messageID);
        } else {
          handleReply.attempts += 1;
          api.sendMessage(
`тЭМ ржнрзБрж▓ ржЙрждрзНрждрж░! 
ЁЯФБ ржЖрж░ржУ ${maxAttempts - handleReply.attempts} ржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рждрзЗ ржкрж╛рж░рзЛред 
ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзЛ!`, event.threadID, event.messageID
          );
        }
        break;
      }
      default:
        break;
    }
  },
};