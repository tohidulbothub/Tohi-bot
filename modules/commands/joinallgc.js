
const fs = require('fs-extra');
const path = require('path');

module.exports.config = {
  name: "joinallgc",
  version: "1.0.0",
  hasPermssion: 2,
  usePrefix: true,
  credits: "TOHI-BOT-HUB",
  description: "Auto rejoin all approved groups after account ban",
  commandCategory: "Admin",
  usages: "/joinallgc [backup|restore|show]",
  cooldowns: 10
};

const OWNER_ID = "100092006324917";

module.exports.run = async function ({ api, event, args }) {
  if (event.senderID !== OWNER_ID) {
    return api.sendMessage(`тЫФя╕П рж╢рзБржзрзБржорж╛рждрзНрж░ owner (${OWNER_ID}) ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи!`, event.threadID, event.messageID);
  }

  const { threadID, messageID } = event;
  const groupDataPath = path.join(__dirname, '../../utils/groupdata.json');
  const { configPath } = global.client;
  
  // Load config and groupdata
  delete require.cache[require.resolve(configPath)];
  var config = require(configPath);
  
  let groupData = {};
  try {
    if (fs.existsSync(groupDataPath)) {
      groupData = JSON.parse(fs.readFileSync(groupDataPath, 'utf8'));
    } else {
      groupData = {
        approvedGroups: [],
        lastUpdated: "",
        totalGroups: 0,
        backupNote: "This file stores approved group data for rejoin feature"
      };
    }
  } catch (error) {
    groupData = {
      approvedGroups: [],
      lastUpdated: "",
      totalGroups: 0,
      backupNote: "This file stores approved group data for rejoin feature"
    };
  }

  const command = (args[0] || "").toLowerCase();

  try {
    switch (command) {
      case "backup": {
        // Backup current approved groups
        if (!config.APPROVAL || !config.APPROVAL.approvedGroups || config.APPROVAL.approvedGroups.length === 0) {
          return api.sendMessage("ЁЯУЭ ржХрзЛржирзЛ approved ржЧрзНрж░рзБржк ржирзЗржЗ backup ржХрж░рж╛рж░ ржЬржирзНржп!", threadID, messageID);
        }

        const currentTime = new Date().toLocaleString("bn-BD", {
          timeZone: "Asia/Dhaka"
        });

        // Create detailed backup
        const backupData = {
          approvedGroups: [],
          lastUpdated: currentTime,
          totalGroups: config.APPROVAL.approvedGroups.length,
          backupNote: "Backup created for rejoin feature"
        };

        // Get group details
        for (const groupId of config.APPROVAL.approvedGroups) {
          try {
            const info = await api.getThreadInfo(groupId);
            backupData.approvedGroups.push({
              threadID: groupId,
              threadName: info.threadName || "Unknown Group",
              memberCount: info.participantIDs.length,
              backupDate: currentTime,
              status: "backed_up"
            });
          } catch (error) {
            // If can't get info, still backup the ID
            backupData.approvedGroups.push({
              threadID: groupId,
              threadName: "Group Info Unavailable",
              memberCount: 0,
              backupDate: currentTime,
              status: "info_unavailable"
            });
          }
        }

        // Save backup
        fs.writeFileSync(groupDataPath, JSON.stringify(backupData, null, 2), 'utf8');

        const successMsg = `тЬЕ BACKUP рж╕ржорзНржкрзВрж░рзНржг рж╣ржпрж╝рзЗржЫрзЗ!

ЁЯУК Backup Details:
ЁЯФ╕ ржорзЛржЯ ржЧрзНрж░рзБржк: ${backupData.totalGroups}ржЯрж┐
ЁЯХТ Backup рж╕ржоржпрж╝: ${currentTime}
ЁЯУБ рж╕ржВрж░ржХрзНрж╖рж┐ржд: utils/groupdata.json

ЁЯТб ржПржЦржи account ban рж╣рж▓рзЗ /joinallgc restore ржжрж┐ржпрж╝рзЗ рж╕ржм ржЧрзНрж░рзБржкрзЗ rejoin ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи!`;

        return api.sendMessage(successMsg, threadID, messageID);
      }

      case "restore": {
        // Auto rejoin to backed up groups
        if (!groupData.approvedGroups || groupData.approvedGroups.length === 0) {
          return api.sendMessage("тЭМ ржХрзЛржирзЛ backup ржбрж╛ржЯрж╛ ржирзЗржЗ! ржкрзНрж░ржержорзЗ /joinallgc backup ржХрж░рзБржиред", threadID, messageID);
        }

        api.sendMessage(`ЁЯФД Auto Rejoin рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗ...
        
ЁЯУК ржорзЛржЯ ржЧрзНрж░рзБржк: ${groupData.approvedGroups.length}ржЯрж┐
тП│ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи...`, threadID);

        let successCount = 0;
        let failCount = 0;
        let results = [];

        for (let i = 0; i < groupData.approvedGroups.length; i++) {
          const group = groupData.approvedGroups[i];
          
          try {
            // Get current user ID
            const botUserID = api.getCurrentUserID();
            
            // Check if bot is already in group
            try {
              const threadInfo = await api.getThreadInfo(group.threadID);
              const isAlreadyMember = threadInfo.participantIDs.includes(botUserID);
              
              if (isAlreadyMember) {
                results.push(`тЬЕ ${group.threadName} - Already member`);
                successCount++;
                continue;
              }
            } catch (checkError) {
              // Group might not exist or bot doesn't have access
              results.push(`тЭМ ${group.threadName} - Can't access group`);
              failCount++;
              continue;
            }

            // Try to rejoin (this requires group invitation or public group)
            // Note: Auto-joining requires the group to be public or bot to be invited
            results.push(`тП│ ${group.threadName} - Rejoin attempt (manual invitation may be needed)`);
            
            // Add delay to prevent rate limiting
            await new Promise(resolve => setTimeout(resolve, 2000));
            
          } catch (error) {
            results.push(`тЭМ ${group.threadName} - Rejoin failed`);
            failCount++;
          }
        }

        // Update config with groups that bot is now in
        if (!config.APPROVAL) {
          config.APPROVAL = { approvedGroups: [], pendingGroups: [], rejectedGroups: [] };
        }

        // Re-approve groups that bot successfully joined
        const currentApproved = new Set(config.APPROVAL.approvedGroups.map(id => String(id)));
        
        for (const group of groupData.approvedGroups) {
          try {
            const threadInfo = await api.getThreadInfo(group.threadID);
            const botUserID = api.getCurrentUserID();
            
            if (threadInfo.participantIDs.includes(botUserID)) {
              if (!currentApproved.has(String(group.threadID))) {
                config.APPROVAL.approvedGroups.push(String(group.threadID));
                successCount++;
              }
            }
          } catch (error) {
            // Group not accessible
          }
        }

        // Save updated config
        const { writeFileSync } = require('fs-extra');
        writeFileSync(configPath, JSON.stringify(config, null, 2), 'utf8');

        const reportMsg = `ЁЯОп AUTO REJOIN рж╕ржорзНржкрзВрж░рзНржг!

ЁЯУК Report:
тЬЕ рж╕ржлрж▓: ${successCount}ржЯрж┐ ржЧрзНрж░рзБржк
тЭМ ржмрзНржпрж░рзНрже: ${failCount}ржЯрж┐ ржЧрзНрж░рзБржк

ЁЯТб Note: Facebook bot auto-join ржХрж░рждрзЗ ржкрж╛рж░рзЗ ржирж╛ред ржЧрзНрж░рзБржкрзЗ manually invite ржХрж░рж╛ рж▓рж╛ржЧржмрзЗред рждржмрзЗ invite ржкрж╛ржУржпрж╝рж╛рж░ ржкрж░ bot automatically approve рж╣ржпрж╝рзЗ ржпрж╛ржмрзЗред

ЁЯФН /joinallgc show ржжрж┐ржпрж╝рзЗ backup list ржжрзЗржЦрзБржиред`;

        return api.sendMessage(reportMsg, threadID, messageID);
      }

      case "show": {
        // Show backed up groups
        if (!groupData.approvedGroups || groupData.approvedGroups.length === 0) {
          return api.sendMessage("ЁЯУЭ ржХрзЛржирзЛ backup ржбрж╛ржЯрж╛ ржирзЗржЗ!", threadID, messageID);
        }

        let msg = `ЁЯУЛ BACKUP GROUP LIST:

ЁЯУК ржорзЛржЯ backup: ${groupData.totalGroups}ржЯрж┐ ржЧрзНрж░рзБржк
ЁЯХТ Last backup: ${groupData.lastUpdated}

тФМтФАтФАтФА GROUP DETAILS тФАтФАтФАтФР\n`;

        for (let i = 0; i < Math.min(groupData.approvedGroups.length, 10); i++) {
          const group = groupData.approvedGroups[i];
          msg += `${i + 1}. ${group.threadName}\n`;
          msg += `   ЁЯЖФ ${group.threadID}\n`;
          msg += `   ЁЯСе ${group.memberCount} members\n`;
          msg += `   ЁЯУЕ ${group.backupDate}\n\n`;
        }

        if (groupData.approvedGroups.length > 10) {
          msg += `... ржПржмржВ ржЖрж░ржУ ${groupData.approvedGroups.length - 10}ржЯрж┐ ржЧрзНрж░рзБржк\n\n`;
        }

        msg += `тФФтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФШ

ЁЯТб Commands:
ЁЯФ╕ /joinallgc backup - ржирждрзБржи backup рждрзИрж░рж┐
ЁЯФ╕ /joinallgc restore - рж╕ржм ржЧрзНрж░рзБржкрзЗ rejoin
ЁЯФ╕ /joinallgc show - ржПржЗ list`;

        return api.sendMessage(msg, threadID, messageID);
      }

      default: {
        const helpMsg = `ЁЯУЛ JOINALLGC COMMAND HELP:

ЁЯФ╕ /joinallgc backup тАФ ржмрж░рзНрждржорж╛ржи approved ржЧрзНрж░рзБржкржЧрзБрж▓рзЛ backup ржХрж░рзБржи
ЁЯФ╕ /joinallgc restore тАФ backup ржерзЗржХрзЗ рж╕ржм ржЧрзНрж░рзБржкрзЗ rejoin ржХрж░рзБржи  
ЁЯФ╕ /joinallgc show тАФ backup list ржжрзЗржЦрзБржи
ЁЯФ╕ /joinallgc help тАФ ржПржЗ help ржорзЗрж╕рзЗржЬ

ЁЯОп ржХрж┐ржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ:
1я╕ПтГг ржкрзНрж░ржержорзЗ /joinallgc backup ржжрж┐ржи
2я╕ПтГг Account ban рж╣рж▓рзЗ ржирждрзБржи account ржжрж┐ржпрж╝рзЗ bot ржЪрж╛рж▓рж╛ржи
3я╕ПтГг /joinallgc restore ржжрж┐ржи
4я╕ПтГг ржЧрзНрж░рзБржкржЧрзБрж▓рзЛрждрзЗ manually invite ржирж┐ржи
5я╕ПтГг Bot automatically approve рж╣ржпрж╝рзЗ ржпрж╛ржмрзЗ!

тЪая╕П Note: Facebook auto-join allow ржХрж░рзЗ ржирж╛ред Group invite ржкрзНрж░ржпрж╝рзЛржЬржиред`;

        return api.sendMessage(helpMsg, threadID, messageID);
      }
    }
  } catch (error) {
    console.error("Joinallgc command error:", error);
    return api.sendMessage("тЭМ ржХрж┐ржЫрзБ ржнрзБрж▓ рж╣ржпрж╝рзЗржЫрзЗ! ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред", threadID, messageID);
  }
};
