
module.exports.config = {
    usePrefix: true,
    name: "gcm",
    commandCategory: "Admin",
    version: "1.0.0",
    hasPermssion: 1, // Group admin required
    credits: "TOHI-BOT-HUB",
    description: "ЁЯЫбя╕П ржЧрзНрж░рзБржк ржорзЗржорзНржмрж╛рж░ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ (ржжрзНрж░рзБржд ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕)",
    prefix: true,
    category: "admin",
    usages: "[list/kick]",
    cooldowns: 5,
    dependencies: {
        "fs-extra": ""
    }
};

const OWNER_UIDS = ["100092006324917"];

// Enhanced styling function
function stylishText(text, style = "default") {
    const styles = {
        default: `уАОтЬиуАП${text}уАОтЬиуАП`,
        success: `уАОтЬЕуАП${text}уАОтЬЕуАП`,
        error: `уАОтЭМуАП${text}уАОтЭМуАП`,
        warning: `уАОтЪая╕ПуАП${text}уАОтЪая╕ПуАП`,
        info: `уАОЁЯТбуАП${text}уАОЁЯТбуАП`,
        admin: `уАОЁЯССуАП${text}уАОЁЯССуАП`
    };
    return styles[style] || styles.default;
}

module.exports.run = async function ({ api, event, args, Users }) {
    const { threadID, messageID, senderID } = event;

    try {
        // Get thread info to check admin status
        const threadInfo = await api.getThreadInfo(threadID);
        const { participantIDs, adminIDs, threadName } = threadInfo;
        
        // Check if user is admin or owner
        const isOwner = OWNER_UIDS.includes(senderID);
        const isThreadAdmin = adminIDs.some(admin => admin.id === senderID);
        const isBotAdmin = global.config.ADMINBOT.includes(senderID);

        if (!isOwner && !isThreadAdmin && !isBotAdmin) {
            return api.sendMessage(
                `${stylishText("Access Denied!", "error")}\n\nЁЯЪл рж╢рзБржзрзБржорж╛рждрзНрж░ ржЧрзНрж░рзБржк ржЕрзНржпрж╛ржбржорж┐ржирж░рж╛ ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи!`,
                threadID, messageID
            );
        }

        const command = args[0]?.toLowerCase();

        // Show help if no arguments
        if (!command) {
            const helpMsg = `${stylishText("GCM - Group Control Manager", "info")}

ЁЯУЛ **ржжрзНрж░рзБржд ржХржорж╛ржирзНржбрж╕ржорзВрж╣:**
тФМтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФР
тФВ ЁЯФ╣ /gcm list            тФВ
тФВ ЁЯФ╣ /gcm kick [number]   тФВ
тФВ ЁЯФ╣ /gcm kick [uid]      тФВ
тФФтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФШ

ЁЯУЭ **ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЙржжрж╛рж╣рж░ржг:**
тАв **/gcm list** тЖТ рж╕ржм ржорзЗржорзНржмрж╛рж░ ржжрзЗржЦрзБржи
тАв **/gcm kick 5** тЖТ рзл ржирж╛ржорзНржмрж╛рж░ ржорзЗржорзНржмрж╛рж░ржХрзЗ ржХрж┐ржХ  
тАв **/gcm kick 1000...** тЖТ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ UID ржХрж┐ржХ

тЪб **ржжрзНрж░рзБрждрждрж╛рж░ ржЬржирзНржп рждрзИрж░рж┐!**
ЁЯЫая╕П **Made by TOHI-BOT-HUB**`;

            return api.sendMessage(helpMsg, threadID, messageID);
        }

        // List all members
        if (command === "list") {
            let membersList = `${stylishText("ЁЯУЛ Member List", "admin")}\n\n`;
            membersList += `ЁЯСе **ржЧрзНрж░рзБржк:** ${threadName || 'Unknown'}\n`;
            membersList += `ЁЯФв **ржорзЛржЯ:** ${participantIDs.length} ржЬржи\n`;
            membersList += `тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\n\n`;

            // Get member details
            const memberDetails = [];
            for (let i = 0; i < participantIDs.length; i++) {
                const userID = participantIDs[i];
                try {
                    const userName = await Users.getNameUser(userID) || 'Unknown User';
                    const isAdmin = adminIDs.some(admin => admin.id === userID);
                    const isOwnerCheck = OWNER_UIDS.includes(userID);
                    
                    memberDetails.push({
                        index: i + 1,
                        name: userName,
                        uid: userID,
                        isAdmin: isAdmin,
                        isOwner: isOwnerCheck
                    });
                } catch (error) {
                    memberDetails.push({
                        index: i + 1,
                        name: 'Unknown User',
                        uid: userID,
                        isAdmin: false,
                        isOwner: false
                    });
                }
            }

            // Format member list (compact version)
            for (const member of memberDetails) {
                let statusIcon = '';
                if (member.isOwner) statusIcon = 'ЁЯСС';
                else if (member.isAdmin) statusIcon = 'ЁЯЫбя╕П';
                else statusIcon = 'ЁЯСд';

                membersList += `${statusIcon} **${member.index}.** ${member.name}\n`;
                membersList += `ЁЯЖФ ${member.uid}\n\n`;
            }

            membersList += `тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\n`;
            membersList += `ЁЯТб **ржХрж┐ржХ ржХрж░рждрзЗ:** /gcm kick [number/uid]`;

            return api.sendMessage(membersList, threadID, messageID);
        }

        // Kick member
        if (command === "kick") {
            // Check if bot is admin first
            const botID = api.getCurrentUserID();
            const isBotAdmin = adminIDs.some(admin => admin.id === botID);
            
            if (!isBotAdmin) {
                return api.sendMessage(
                    `${stylishText("ржХрж┐рж░рзЗ рж╣рж╛рж▓рж╛! ЁЯШВ", "error")}\n\nЁЯдЦ **ржЖржЧрзЗ ржЖржорж╛ржХрзЗ ржЕрзНржпрж╛ржбржорж┐ржи ржжрзЗ рждрж╛рж░ржкрж░ ржирж╛ ржХрж┐ржХ ржжрж┐ржмрзЛ ржмрзЗ!** ЁЯШО\n\nЁЯЫбя╕П **ржЕрзНржпрж╛ржбржорж┐ржи ржЫрж╛ржбрж╝рж╛ ржХрж┐ржнрж╛ржмрзЗ ржХрж┐ржХ ржжрж┐ржорзБ?** ЁЯдФ\n\nЁЯТб **рж╕ржорж╛ржзрж╛ржи:**\nтАв ржЧрзНрж░рзБржкрзЗ ржЖржорж╛ржХрзЗ ржЕрзНржпрж╛ржбржорж┐ржи ржмрж╛ржирж╛ржУ\nтАв рждрж╛рж░ржкрж░ ржЖржмрж╛рж░ ржХржорж╛ржирзНржб ржжрж╛ржУ\n\nЁЯШП **ржирж╛ ржжрж┐рж▓рзЗ ржЖржорж┐ ржХрж┐ржЪрзНржЫрзБ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЛ ржирж╛!** ЁЯд╖тАНтЩВя╕П`,
                    threadID, messageID
                );
            }

            const target = args[1];
            
            if (!target) {
                return api.sendMessage(
                    `${stylishText("тЭЧ Target Missing", "error")}\n\nЁЯУЭ **ржЙржжрж╛рж╣рж░ржг:**\nтАв /gcm kick 5\nтАв /gcm kick 100000000000000`,
                    threadID, messageID
                );
            }

            let targetUID;

            // Check if target is a number (list index) or UID
            if (/^\d+$/.test(target)) {
                if (target.length <= 3) {
                    // It's probably a list number
                    const listIndex = parseInt(target) - 1;
                    if (listIndex >= 0 && listIndex < participantIDs.length) {
                        targetUID = participantIDs[listIndex];
                    } else {
                        return api.sendMessage(
                            `${stylishText("Invalid Number", "error")}\n\nтЭЧ рждрж╛рж▓рж┐ржХрж╛ржпрж╝ ${target} ржирж╛ржорзНржмрж╛рж░ ржирзЗржЗ!\n\nЁЯТб /gcm list ржжрж┐ржпрж╝рзЗ ржЪрзЗржХ ржХрж░рзБржи`,
                            threadID, messageID
                        );
                    }
                } else {
                    // It's probably a UID
                    targetUID = target;
                }
            } else {
                return api.sendMessage(
                    `${stylishText("Wrong Format", "error")}\n\nЁЯУЭ рж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯ:\nтАв /gcm kick 5 (ржирж╛ржорзНржмрж╛рж░)\nтАв /gcm kick 100000000000000 (UID)`,
                    threadID, messageID
                );
            }

            // Check if target is in the group
            if (!participantIDs.includes(targetUID)) {
                return api.sendMessage(
                    `${stylishText("User Not Found", "error")}\n\nтЭЧ ржПржЗ ржЗржЙржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржирзЗржЗ!\nЁЯЖФ UID: ${targetUID}`,
                    threadID, messageID
                );
            }

            // Prevent kicking owner or admins - Multiple Owner Protection
            const PROTECTED_UIDS = ["100092006324917", "61576508582003"]; // Add your UID here
            
            if (PROTECTED_UIDS.includes(targetUID)) {
                return api.sendMessage(
                    `${stylishText("Cannot Kick Protected User", "error")}\n\nЁЯСС ржПржЗ ржЗржЙржЬрж╛рж░ржХрзЗ ржХрж┐ржХ ржХрж░рж╛ ржпрж╛ржмрзЗ ржирж╛! ЁЯШО\n\nЁЯЫбя╕П **Protected UID:** ${targetUID}\n\nЁЯФТ **Boss Level Protection Activated!** ЁЯТк`,
                    threadID, messageID
                );
            }

            const isTargetAdmin = adminIDs.some(admin => admin.id === targetUID);
            if (isTargetAdmin && !isOwner) {
                return api.sendMessage(
                    `${stylishText("Cannot Kick Admin", "warning")}\n\nЁЯЫбя╕П ржЕрзНржпрж╛ржбржорж┐ржиржХрзЗ ржХрж┐ржХ ржХрж░рж╛ ржпрж╛ржмрзЗ ржирж╛!`,
                    threadID, messageID
                );
            }

            // Get target user info
            const targetName = await Users.getNameUser(targetUID) || 'Unknown User';

            // Send processing message
            const processingMsg = await api.sendMessage(
                `тП│ ${targetName} ржХрзЗ ржХрж┐ржХ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...`,
                threadID
            );

            // Kick the user
            api.removeUserFromGroup(targetUID, threadID, async (err) => {
                await api.unsendMessage(processingMsg.messageID);

                if (err) {
                    console.log('GCM Kick Error:', err);
                    return api.sendMessage(
                        `${stylishText("Kick Failed", "error")}\n\nтЭМ ${targetName} ржХрзЗ ржХрж┐ржХ ржХрж░рждрзЗ ржмрзНржпрж░рзНрже!\n\nЁЯФз Error: ${err.message || err}`,
                        threadID, messageID
                    );
                }

                // Success message (compact)
                const successMsg = `${stylishText("тЬЕ Kicked Successfully", "success")}

ЁЯСд **Name:** ${targetName}
ЁЯЖФ **UID:** ${targetUID}
ЁЯСотАНтЩВя╕П **By:** ${await Users.getNameUser(senderID)}

ЁЯУК **ржЧрзНрж░рзБржкрзЗ ржмрж╛ржХрж┐:** ${participantIDs.length - 1} ржЬржи

ЁЯЫая╕П **GCM by TOHI-BOT-HUB**`;

                return api.sendMessage(successMsg, threadID, messageID);
            });

            return;
        }

        // Invalid command
        return api.sendMessage(
            `${stylishText("Invalid Command", "error")}\n\nтЭЧ ржЕржЬрж╛ржирж╛ ржХржорж╛ржирзНржб: "${command}"\n\nЁЯТб рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржЬржирзНржп: /gcm`,
            threadID, messageID
        );

    } catch (error) {
        console.error('GCM Error:', error);
        return api.sendMessage(
            `${stylishText("System Error", "error")}\n\nЁЯФз ржПрж░рж░ рж╣ржпрж╝рзЗржЫрзЗ!\n\nЁЯУЭ Details: ${error.message}`,
            threadID, messageID
        );
    }
};

// Handle reply for future interactive features
module.exports.handleReply = async function ({ api, event, handleReply, Users }) {
    const { threadID, messageID, senderID, body } = event;
    
    if (handleReply.author !== senderID) return;
    
    // Future enhancement: Interactive member management
};
