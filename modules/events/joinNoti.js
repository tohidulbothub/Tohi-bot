
const fs = require("fs-extra");
const path = require("path");
const { apiCallWithRetry } = require("../../utils/apiHelper");

module.exports.config = {
    name: "joinNoti",
    eventType: ["log:subscribe"],
    version: "2.0.0",
    credits: "TOHIDUL (Enhanced by TOHI-BOT-HUB)",
    description: "Enhanced notification system for bot and user joins with random media support",
    dependencies: {
        "fs-extra": "",
        "path": ""
    }
};

module.exports.onLoad = function () {
    const joinvideoDir = path.join(__dirname, "cache", "joinvideo");
    const randomGifDir = path.join(joinvideoDir, "randomgif");
    if (!fs.existsSync(joinvideoDir)) fs.mkdirSync(joinvideoDir, { recursive: true });
    if (!fs.existsSync(randomGifDir)) fs.mkdirSync(randomGifDir, { recursive: true });
};

module.exports.run = async function({ api, event, Users }) {
    try {
        const { threadID } = event;

        // Check if group is approved before sending any notifications
        const configPath = require('path').join(__dirname, '../../config.json');
        let config;
        try {
            delete require.cache[require.resolve(configPath)];
            config = require(configPath);
        } catch (error) {
            config = {};
        }

        // Initialize approval system if not exists
        if (!config.APPROVAL) {
            config.APPROVAL = {
                approvedGroups: [],
                pendingGroups: [],
                rejectedGroups: []
            };
        }

        // Check if group is approved
        const isApproved = config.APPROVAL.approvedGroups.includes(String(threadID));
        
        // If group is not approved, don't send any join notifications
        if (!isApproved) {
            console.log(`тП│ Join notification blocked for unapproved group: ${threadID}`);
            return; // Exit early without sending notifications
        }

        // If bot is added
        if (event.logMessageData.addedParticipants.some(i => i.userFbId == api.getCurrentUserID())) {
            try {
                // Set bot nickname
                const botname = global.config.BOTNAME || "TOHI-BOT";
                await api.changeNickname(`[ ${global.config.PREFIX} ] тАв ${botname}`, threadID, api.getCurrentUserID());

                // Get thread info
                const threadInfo = await api.getThreadInfo(threadID);
                const threadName = threadInfo.threadName || "Unknown Group";
                const memberCount = threadInfo.participantIDs.length;
                const adminCount = threadInfo.adminIDs.length;

                // Current time
                const currentTime = new Date().toLocaleString("bn-BD", {
                    timeZone: "Asia/Dhaka",
                    hour12: false
                });

                // Enhanced bot welcome message
                const botWelcomeMsg = `
тХФтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЧ
    ЁЯдЦ ${stylishText("BOT ACTIVATION COMPLETE")} ЁЯдЦ
тХЪтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЭ

ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо рж╕ржмрж╛ржЗ! ЁЯМЯ

ЁЯОЙ ржЖржорж┐ ${botname} ржПржЗ ржЧрзНрж░рзБржкрзЗ рж╕ржлрж▓ржнрж╛ржмрзЗ ржпрзБржХрзНржд рж╣ржпрж╝рзЗржЫрж┐!

тФМтФАтФАтФА ЁЯУК ржЧрзНрж░рзБржк рждржерзНржп тФАтФАтФАтФР
тФВ ЁЯПа ржЧрзНрж░рзБржк: ${threadName}
тФВ ЁЯСе ржорзЛржЯ рж╕ржжрж╕рзНржп: ${memberCount} ржЬржи
тФВ ЁЯСС ржПржбржорж┐ржи: ${adminCount} ржЬржи
тФВ тЪб ржЖржорж╛рж░ ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕: ${global.config.PREFIX}
тФВ ЁЯОп ржорзЛржЯ ржХржорж╛ржирзНржб: ${global.client.commands.size}+
тФФтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФШ

тФМтФАтФАтФА ЁЯЪА рж╢рзБрж░рзБ ржХрж░рзБржи тФАтФАтФАтФР
тФВ ${global.config.PREFIX}help - рж╕ржм ржХржорж╛ржирзНржб ржжрзЗржЦрзБржи
тФВ ${global.config.PREFIX}menu - ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐ ржорзЗржирзБ
тФВ ${global.config.PREFIX}info - ржмржЯ рждржерзНржп
тФВ ${global.config.PREFIX}admin - ржПржбржорж┐ржи ржХржорж╛ржирзНржб
тФФтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФШ

тФМтФАтФАтФА тнР ржмрж┐рж╢рзЗрж╖ ржлрж┐ржЪрж╛рж░ тФАтФАтФАтФР
тФВ ЁЯдЦ AI ржЪрзНржпрж╛ржЯ ржУ ржЗржорзЗржЬ ржЬрзЗржирж╛рж░рзЗрж╢ржи
тФВ ЁЯУ▒ рж╕рзЛрж╢рзНржпрж╛рж▓ ржорж┐ржбрж┐ржпрж╝рж╛ ржбрж╛ржЙржирж▓рзЛржбрж╛рж░
тФВ ЁЯЫбя╕П ржЧрзНрж░рзБржк ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ ржЯрзБрж▓рж╕
тФВ ЁЯОо ржЧрзЗржорж╕ ржУ ржПржирзНржЯрж╛рж░ржЯрзЗржЗржиржорзЗржирзНржЯ
тФВ ЁЯО╡ ржорж┐ржЙржЬрж┐ржХ ржУ ржнрж┐ржбрж┐ржУ ржкрзНрж▓рзЗржпрж╝рж╛рж░
тФВ ЁЯМР ржУржпрж╝рзЗржм рж╕рж╛рж░рзНржЪ ржУ ржЯрзНрж░рж╛ржирзНрж╕рж▓рзЗржЯ
тФФтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФШ

тЪая╕П ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржирзЛржЯ:
тФгтФБ ржЧрзНрж░рзБржкрзЗрж░ ржирж┐ржпрж╝ржо ржорзЗржирзЗ ржЪрж▓рзБржи
тФгтФБ рж╕рзНржкрзНржпрж╛ржо ржПржбрж╝рж┐ржпрж╝рзЗ ржЪрж▓рзБржи  
тФгтФБ рж╕ржмрж╛рж░ рж╕рж╛ржерзЗ ржнрж╛рж▓рзЛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
тФЧтФБ ржпрзЗржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ржпрж╝ ржПржбржорж┐ржиржжрзЗрж░ ржЬрж╛ржирж╛ржи

ЁЯХТ ржпрзБржХрзНржд рж╣ржУржпрж╝рж╛рж░ рж╕ржоржпрж╝: ${currentTime}

тЛЖтЬжтЛЖтОптОптОптОптОптОптОптОптОптЛЖтЬжтЛЖ
ЁЯЪй Made by TOHIDUL
тЛЖтЬжтЛЖтОптОптОптОптОптОптОптОптОптЛЖтЬжтЛЖ`;

                // Try to send with welcome video/GIF
                const welcomeMediaPaths = [
                    path.join(__dirname, "cache", "ullash.mp4"),
                    path.join(__dirname, "cache", "join", "join.gif"),
                    path.join(__dirname, "cache", "welcome.mp4")
                ];

                let attachment = null;
                for (const mediaPath of welcomeMediaPaths) {
                    if (fs.existsSync(mediaPath)) {
                        attachment = fs.createReadStream(mediaPath);
                        break;
                    }
                }

                return api.sendMessage({ 
                    body: botWelcomeMsg, 
                    attachment: attachment
                }, threadID);

            } catch (botJoinError) {
                console.error('Bot join notification error:', botJoinError);

                // Fallback message
                const fallbackMsg = `ЁЯдЦ ${global.config.BOTNAME || "TOHI-BOT"} рж╕ржлрж▓ржнрж╛ржмрзЗ ржЧрзНрж░рзБржкрзЗ ржпрзБржХрзНржд рж╣ржпрж╝рзЗржЫрзЗ!\n\n${global.config.PREFIX}help рж▓рж┐ржЦрзЗ ржХржорж╛ржирзНржб ржжрзЗржЦрзБржиред\n\nЁЯЪй Made by TOHIDUL`;
                return api.sendMessage(fallbackMsg, threadID);
            }
        }

        // For new member(s)
        try {
            const { threadName, participantIDs } = await api.getThreadInfo(threadID);
            const threadData = global.data.threadData.get(parseInt(threadID)) || {};

            // Enhanced member welcome template
            const memberWelcomeTemplate = (typeof threadData.customJoin == "undefined")
                ? `
тХФтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЧ
    ЁЯОК ${stylishText("WELCOME NEW MEMBER")} ЁЯОК
тХЪтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЭ

ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо! ЁЯМЯ

ЁЯОЙ рж╕рзНржмрж╛ржЧрждржо {name}!
ЁЯПа ржЖржкржирж┐ ржПржЦржи "{threadName}" ржЧрзНрж░рзБржкрзЗрж░ рж╕ржжрж╕рзНржп!

тФМтФАтФАтФА ЁЯУК ржЖржкржирж╛рж░ рждржерзНржп тФАтФАтФАтФР
тФВ ЁЯЖФ ржЖржкржирж┐ {memberNumber} ржиржВ рж╕ржжрж╕рзНржп
тФВ ЁЯСе ржЧрзНрж░рзБржкрзЗ ржорзЛржЯ: ${participantIDs.length} ржЬржи
тФВ ЁЯдЦ ржмржЯ рж╕рзБржмрж┐ржзрж╛: тЬЕ ржЙржкрж▓ржмрзНржз
тФВ тЪб ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕: ${global.config.PREFIX}
тФФтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФШ

тФМтФАтФАтФА ЁЯОп ржЧрзНрж░рзБржк ржЧрж╛ржЗржб тФАтФАтФАтФР
тФВ ${global.config.PREFIX}help - ржХржорж╛ржирзНржб рждрж╛рж▓рж┐ржХрж╛
тФВ ${global.config.PREFIX}rules - ржЧрзНрж░рзБржк ржирж┐ржпрж╝ржо
тФВ ${global.config.PREFIX}info - ржмржЯ рждржерзНржп
тФВ ${global.config.PREFIX}menu - ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐ ржорзЗржирзБ
тФФтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФШ

тЪая╕П ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржирж┐рж░рзНржжрзЗрж╢ржирж╛:
тФгтФБ ржЧрзНрж░рзБржкрзЗрж░ ржирж┐ржпрж╝ржорж╛ржмрж▓рзА ржорзЗржирзЗ ржЪрж▓рзБржи
тФгтФБ рж╕ржмрж╛рж░ рж╕рж╛ржерзЗ ржнрж╛рж▓рзЛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
тФгтФБ рж╕рзНржкрзНржпрж╛ржо ржмрж╛ ржмрж┐ржЬрзНржЮрж╛ржкржи ржПржбрж╝рж┐ржпрж╝рзЗ ржЪрж▓рзБржи
тФгтФБ ржПржбржорж┐ржиржжрзЗрж░ рж╕ржорзНржорж╛ржи ржХрж░рзБржи
тФЧтФБ ржПржХрж╕рж╛ржерзЗ ржоржЬрж╛ ржХрж░рзБржи! ЁЯОЙ

ржЖржкржирж╛ржХрзЗ ржЖржмрж╛рж░ржУ рж╣рж╛рж░рзНржжрж┐ржХ рж╕рзНржмрж╛ржЧрждржо! тЭдя╕П

тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтЬжтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
ЁЯЪй TOHI-BOT TEAM
тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтЬжтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА`
                : threadData.customJoin;

            const memJoin = event.logMessageData.addedParticipants;
            let nameArray = [], mentions = [];
            let memberNumberArray = [];

            for (let i = 0; i < memJoin.length; i++) {
                const user = memJoin[i];
                nameArray.push(user.fullName);
                mentions.push({ tag: user.fullName, id: user.userFbId });
                memberNumberArray.push(participantIDs.length - memJoin.length + i + 1);
            }

            // Replace template variables
            let welcomeMessage = memberWelcomeTemplate
                .replace(/\{name}/g, nameArray.join(", "))
                .replace(/\{memberNumber}/g, memberNumberArray.join(", "))
                .replace(/\{threadName}/g, threadName);

            // Select random media
            const gifDir = path.join(__dirname, "cache", "joinvideo", "randomgif");
            let welcomeAttachment;
            
            if (fs.existsSync(gifDir)) {
                const files = fs.readdirSync(gifDir).filter(file => {
                    const ext = path.extname(file).toLowerCase();
                    return ['.gif', '.mp4', '.jpg', '.jpeg', '.png'].includes(ext);
                });

                if (files.length > 0) {
                    const randomFile = files[Math.floor(Math.random() * files.length)];
                    const filePath = path.join(gifDir, randomFile);
                    if (fs.existsSync(filePath)) {
                        welcomeAttachment = fs.createReadStream(filePath);
                    }
                }
            }

            return api.sendMessage({ 
                body: welcomeMessage, 
                attachment: welcomeAttachment, 
                mentions 
            }, threadID);

        } catch (memberJoinError) {
            console.error('Member join notification error:', memberJoinError);

            // Fallback for new members
            const memJoin = event.logMessageData.addedParticipants;
            const nameArray = memJoin.map(user => user.fullName);

            const fallbackMsg = `ЁЯОЙ рж╕рзНржмрж╛ржЧрждржо ${nameArray.join(', ')}!\n\nржЖржорж╛ржжрзЗрж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрзЗржУржпрж╝рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржжред ${global.config.PREFIX}help рж▓рж┐ржЦрзЗ ржмржЯ ржХржорж╛ржирзНржб ржжрзЗржЦрзБржиред\n\nЁЯЪй Made by TOHIDUL`;

            return api.sendMessage(fallbackMsg, threadID);
        }

    } catch (error) {
        console.error('JoinNoti main error:', error);
    }
};

// Helper function for styling text
function stylishText(text) {
    return `тЬи ${text} тЬи`;
}
