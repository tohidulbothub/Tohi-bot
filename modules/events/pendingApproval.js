const path = require('path');
const fs = require('fs');

module.exports = {
  config: {
    name: "pendingApproval",
    eventType: ["log:subscribe"],
    version: "5.0.0",
    credits: "TOHIDUL (Easy Bangla Edition)",
    description: "ржирждрзБржи ржЧрзНрж░рзБржкрзЗ ржмржЯ ржЧрзЗрж▓рзЗ approval pending ржП ржкрж╛ржарж╛рзЯ, owner approval ржирж╛ ржжрж┐рж▓рзЗ ржХрзЛржирзЛ ржХржорж╛ржирзНржб ржХрж╛ржЬ ржХрж░ржмрзЗ ржирж╛ред"
  },
  run: async function({ api, event }) {
    try {
      const configPath = path.join(__dirname, '../../config.json');
      delete require.cache[require.resolve(configPath)];
      const config = require(configPath);
      const OWNER_ID = "100092006324917";

      // APPROVAL init
      if (!config.APPROVAL) {
        config.APPROVAL = {
          approvedGroups: [],
          pendingGroups: [],
          rejectedGroups: []
        };
        fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
      }

      // Disable auto-approve
      if (!config.AUTO_APPROVE) {
        config.AUTO_APPROVE = { enabled: false };
      } else {
        config.AUTO_APPROVE.enabled = false;
      }
      fs.writeFileSync(configPath, JSON.stringify(config, null, 2));

      // Bot added to group
      if (
        event.logMessageData &&
        event.logMessageData.addedParticipants &&
        event.logMessageData.addedParticipants.some(i => i.userFbId == api.getCurrentUserID())
      ) {
        const threadID = event.threadID;

        if (config.APPROVAL.approvedGroups.includes(threadID)) return;
        if (config.APPROVAL.rejectedGroups && config.APPROVAL.rejectedGroups.includes(threadID)) return;

        if (!config.APPROVAL.pendingGroups.includes(threadID)) {
          config.APPROVAL.pendingGroups.push(threadID);
          fs.writeFileSync(configPath, JSON.stringify(config, null, 2), 'utf8');
        }

        try {
          const threadInfo = await api.getThreadInfo(threadID);
          const msg = 
`ЁЯФФ ржирждрзБржи ржЧрзНрж░рзБржкрзЗ ржмржЯ ржпрзЛржЧ рж╣ржпрж╝рзЗржЫрзЗ!

ржирж╛ржо: ${threadInfo.threadName}
ржЖржЗржбрж┐: ${threadID}
ржорзЗржорзНржмрж╛рж░: ${threadInfo.participantIDs.length} ржЬржи

ржПржЗ ржЧрзНрж░рзБржкрзЗ ржмржЯ ржЪрж╛рж▓рзБ ржХрж░ржмрзЗржи?

ржЙрждрзНрждрж░ ржжрж┐ржи:
рзз ржмрж╛ yes тАФ ржЪрж╛рж▓рзБ ржХрж░рждрзЗ
рзи ржмрж╛ no тАФ ржмрж╛рждрж┐рж▓ ржХрж░рждрзЗ

ржЕржержмрж╛: /approve ${threadID}

тЪая╕П ржЕржирзБржорзЛржжржи ржирж╛ ржжрж┐рж▓рзЗ ржПржЗ ржЧрзНрж░рзБржкрзЗ ржмржЯ ржХрж╛ржЬ ржХрж░ржмрзЗ ржирж╛ред`;

          api.sendMessage(msg, OWNER_ID, (error, info) => {
            if (!error) {
              global.client.handleReply.push({
                name: this.config.name,
                messageID: info.messageID,
                author: OWNER_ID,
                threadID: threadID,
                type: "approval"
              });
            }
          });
        } catch {}
      }
    } catch {}
  },

  handleReply: async function ({ api, event, handleReply }) {
    const OWNER_ID = "100092006324917";
    if (event.senderID !== OWNER_ID) {
      return api.sendMessage(`тЫФя╕П ржХрзЗржмрж▓ owner (${OWNER_ID}) approval ржжрж┐рждрзЗ ржкрж╛рж░ржмрзЗржиред`, event.threadID);
    }

    const configPath = path.join(__dirname, '../../config.json');
    delete require.cache[require.resolve(configPath)];
    var config = require(configPath);

    const threadID = handleReply.threadID;
    const choice = event.body.toLowerCase().trim();

    if (["yes", "y", "approve", "рж╣рзНржпрж╛ржБ", "1"].includes(choice)) {
      if (!config.APPROVAL.approvedGroups.includes(threadID)) {
        config.APPROVAL.approvedGroups.push(threadID);
      }
      config.APPROVAL.pendingGroups = config.APPROVAL.pendingGroups.filter(id => id !== threadID);
      config.APPROVAL.rejectedGroups = config.APPROVAL.rejectedGroups.filter(id => id !== threadID);

      fs.writeFileSync(configPath, JSON.stringify(config, null, 2), 'utf8');
      try {
        const info = await api.getThreadInfo(threadID);
        api.sendMessage(
`тЬЕ ржПржЗ ржЧрзНрж░рзБржкрзЗ ржмржЯ ржЪрж╛рж▓рзБ рж╣рж▓рзЛ!

ржирж╛ржо: ${info.threadName}
ржорзЗржорзНржмрж╛рж░: ${info.participantIDs.length} ржЬржи

ржПржЦржи рж╕ржм ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛ржмрзЗред
/help рж▓рж┐ржЦрзЗ ржжрзЗржЦрзБржиред`, threadID);
        api.sendMessage(`тЬЕ "${info.threadName}" ржЧрзНрж░рзБржкржЯрж┐ ржЪрж╛рж▓рзБ рж╣ржпрж╝рзЗржЫрзЗ!`, event.threadID, event.messageID);
      } catch {
        api.sendMessage(`тЬЕ ржЧрзНрж░рзБржк ржЪрж╛рж▓рзБ рж╣ржпрж╝рзЗржЫрзЗ!`, event.threadID, event.messageID);
      }
    } else if (["no", "n", "reject", "ржирж╛", "2"].includes(choice)) {
      if (!config.APPROVAL.rejectedGroups.includes(threadID)) {
        config.APPROVAL.rejectedGroups.push(threadID);
      }
      config.APPROVAL.pendingGroups = config.APPROVAL.pendingGroups.filter(id => id !== threadID);
      config.APPROVAL.approvedGroups = config.APPROVAL.approvedGroups.filter(id => id !== threadID);

      fs.writeFileSync(configPath, JSON.stringify(config, null, 2), 'utf8');
      try {
        const info = await api.getThreadInfo(threadID);
        api.sendMessage(
`тЭМ ржПржЗ ржЧрзНрж░рзБржкрзЗ ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рж╛ рж╣ржпрж╝ржирж┐ред

ржирж╛ржо: ${info.threadName}

ржХрзЛржирзЛ ржХржорж╛ржирзНржб ржХрж╛ржЬ ржХрж░ржмрзЗ ржирж╛ред`, threadID);
        api.sendMessage(`тЭМ "${info.threadName}" ржЧрзНрж░рзБржкржЯрж┐ ржмрж╛рждрж┐рж▓ рж╣ржпрж╝рзЗржЫрзЗ!`, event.threadID, event.messageID);
      } catch {
        api.sendMessage(`тЭМ ржЧрзНрж░рзБржк ржмрж╛рждрж┐рж▓ рж╣ржпрж╝рзЗржЫрзЗ!`, event.threadID, event.messageID);
      }
    } else {
      api.sendMessage(`тЭУ рж▓рж┐ржЦрзБржи: рзз (ржЪрж╛рж▓рзБ) ржмрж╛ рзи (ржмрж╛рждрж┐рж▓)`, event.threadID, event.messageID);
    }
  }
};